import os
import time
import random
from datetime import datetime


class MalwareScanner:
    def __init__(self):
        self.scan_results = []
        self.is_scanning = False
        self.files_scanned = 0
        self.threats_detected = 0
        self.current_file = ""

    def scan_file(self, file_path):
        """Simulates scanning a file for malware threats."""
        self.current_file = file_path
        self.files_scanned += 1
        time.sleep(0.1)  # Simulating scan time
        
        # Simulate a threat detection probability
        threat_detected = random.random() < 0.05  # 5% chance
        if threat_detected:
            self.threats_detected += 1
            severity = random.choice(['High', 'Medium', 'Low'])
            threat_name = random.choice(['Trojan.Win32', 'Ransomware.Crypto', 'Worm.Win32'])
            activities = {
                'process_activity': ['Created suspicious process', 'Modified system files'],
                'registry_changes': ['Modified startup registry', 'Added autorun entry'],
                'file_system': ['Created hidden files', 'Modified system DLLs'],
                'network': ['Attempted unauthorized connection', 'DNS queries to known malicious domains']
            }
            return {
                'file': file_path,
                'status': 'malicious',
                'severity': severity,
                'threat_name': threat_name,
                'activities': activities,
                'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'quarantined': True
            }
        return {
            'file': file_path,
            'status': 'safe',
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

    def scan_directory(self, directories):
        """Scans directories for malware."""
        self.is_scanning = True
        results = []
        
        for directory in directories:
            for root, _, files in os.walk(directory):
                for file in files:
                    if not self.is_scanning:
                        break
                    file_path = os.path.join(root, file)
                    result = self.scan_file(file_path)
                    results.append(result)
        self.is_scanning = False
        return results
