import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from core.malware_scanner import MalwareScanner
from core.File_scan import analyze_directory
from ui.styles import StyleConfig as style

class MalwareScanUI:
    def __init__(self, parent):
        self.parent = parent
        self.create_header()
        self.create_scan_options()
        self.create_progress_section()

    def create_header(self):
        header_frame = tk.Frame(self.parent, bg=style.BG_PRIMARY)
        header_frame.pack(fill="x", pady=20)
        tk.Label(header_frame, text="Malware Scanner", font=style.HEADER_FONT,
                 bg=style.BG_PRIMARY, fg=style.TEXT_PRIMARY).pack(side="left")

    def create_scan_options(self):
        options_frame = tk.Frame(self.parent, bg=style.BG_PRIMARY)
        options_frame.pack(fill="x", pady=20)
        scan_types = [
            ("ðŸš€ Quick Scan", "Scans critical system areas", "quick_scan"),
            ("ðŸŽ¯ Custom Scan", "Scan specific directories", "custom_scan")
        ]
        for icon, description, scan_type in scan_types:
            card = tk.Frame(options_frame, bg=style.BG_SECONDARY, padx=20, pady=15)
            card.pack(fill="x", pady=10, padx=50)
            tk.Label(card, text=icon, font=("Arial", 24),
                     bg=style.BG_SECONDARY, fg=style.ACCENT).pack(side="left", padx=10)
            text_frame = tk.Frame(card, bg=style.BG_SECONDARY)
            text_frame.pack(side="left", expand=True)
            tk.Label(text_frame, text=icon.split(" ")[1], font=style.TITLE_FONT,
                     bg=style.BG_SECONDARY, fg=style.TEXT_PRIMARY).pack(anchor="w")
            tk.Label(text_frame, text=description, font=style.BODY_FONT,
                     bg=style.BG_SECONDARY, fg=style.TEXT_SECONDARY).pack(anchor="w")
            tk.Button(card, text="Start Scan", font=style.BODY_FONT,
                       bg=style.ACCENT, fg="white", borderwidth=0,
                       command=lambda st=scan_type: self.start_scan(st)).pack(side="right", padx=10)

    def create_progress_section(self):
        progress_frame = tk.Frame(self.parent, bg=style.BG_PRIMARY)
        progress_frame.pack(fill="x", pady=20, padx=50)
        self.progress = ttk.Progressbar(progress_frame, orient="horizontal",
                                       length=400, mode="determinate")
        self.progress.pack(fill="x", pady=10)
        self.status_label = tk.Label(progress_frame, text="Ready to scan...",
                                      font=style.BODY_FONT, bg=style.BG_PRIMARY,
                                      fg=style.TEXT_SECONDARY)
        self.status_label.pack()

    def start_scan(self, scan_type):
        if scan_type == "custom_scan":
            self.run_custom_scan()
        else:
            self.status_label.config(text=f"Starting {scan_type.replace('_', ' ')}...")

    def run_custom_scan(self):
        directory = filedialog.askdirectory(title="Select a directory to scan")
        if directory:
            self.status_label.config(text="Scanning directory...")
            self.parent.update_idletasks()
            results = analyze_directory(directory)
            self.show_results(results)
            self.status_label.config(text="Scan complete!")
        else:
            self.status_label.config(text="Custom scan canceled.")

    def show_results(self, results):
        result_window = tk.Toplevel(self.parent)
        result_window.title("Scan Results")
        result_window.geometry("800x600")
        
        container = tk.Frame(result_window)
        container.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Create notebook for tabs
        notebook = ttk.Notebook(container)
        notebook.pack(fill='both', expand=True)
        
        for result in results:
            if 'error' in result:
                tab = tk.Frame(notebook)
                tk.Label(tab, text=f"Error scanning {result.get('file', 'Unknown')}: {result['error']}").pack()
                notebook.add(tab, text=result.get('file', 'Unknown'))
                continue
            
            tab = tk.Frame(notebook)
            scroll = tk.Scrollbar(tab)
            text = tk.Text(tab, wrap=tk.WORD, yscrollcommand=scroll.set)
            scroll.config(command=text.yview)
            
            content = f"""
            File: {result['file']}
            Prediction: {result['prediction']} ({result['confidence']*100:.2f}% confidence)
            
            === Key Indicators ===
            Suspicious API Calls: {result['features']['Suspicious API Calls']}
            DLL Injection: {result['features']['DLL Injection']}
            Unusual Network Ports: {result['features']['unusual_ports_count']}
            Elevated Privileges: {result['features']['elevated_privilege_count']}
            File Entropy: {result['features']['entropy']:.2f}
            
            === Network Activity ===
            Unique IPs: {len(result['additional_info'].get('Network IPs', []))}
            Unique Domains: {', '.join(result['additional_info'].get('Network Domains', []))}
            
            === Process Activity ===
            Spawned Processes: {', '.join(result['additional_info'].get('Processes', []))}
            """
            
            text.insert(tk.END, content)
            text.config(state=tk.DISABLED)
            text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
            scroll.pack(side=tk.RIGHT, fill=tk.Y)
            
            notebook.add(tab, text=result['file'])

if __name__ == "__main__":
    root = tk.Tk()
    app = MalwareScanUI(root)
    root.mainloop()